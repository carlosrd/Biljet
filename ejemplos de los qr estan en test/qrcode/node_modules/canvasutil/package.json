{
  "name": "canvasutil",
  "description": "Pixel transformations and processing for canvas",
  "version": "0.0.2",
  "author": {
    "name": "Ryan Day",
    "email": "soldair@gmail.com"
  },
  "keywords": [
    "canvas",
    "grayscale",
    "transform"
  ],
  "main": "./app.js",
  "homepage": "http://github.com/soldair/node-canvasutil",
  "dependencies": {
    "canvas": ">= 0.4.3"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/soldair/node-canvasutil.git"
  },
  "engines": {
    "node": ">=0.2.3"
  },
  "readme": "node-canvasutil\n===============\n\nthis is a module designed to provide a lib of color space conversion functions and\nto provide filters for transforming pixels in a canvas image data array in wierd, fun, and useful ways.\n\napi\n-------\n\nPixelCore\npixel core is the core object used to apply transforms on a canvas.\n\nthis is a standard object so extend it as you need =)\n\tvar PixelCore = require('canvasutil').PixelCore\n\t, pixelProcessor = new PixelCore();\n\nthis is the only method defined in the prototype of PixelCore\nit accepts a node canvas as arg 1 and a transform callback as arg 2\n\tpixelProcessor.iterate(Canvas,eachPixelCallback);\n\nthis is a value that may be used in transform callbacks that have a scaling behavior\n\tpixelProcessor.threshold = 50;\n\nthe transforms object is a convience property to hold all available transform methods\n\tpixelProcessor.transforms\n\nthis holds all grayscale flavors of transforms\n\tpixelProcessor.transforms.grayscale\n\t//the best grayscale transform is luma so use that one unless you have a specific need\n\tpixelProcessor.transforms.grayscale.luma\n\nand i have some other interesting transforms\n\t//brightens everything below a threshold to threshold\n\t//threshold range is 0-100\n\tpixelProcessor.transforms.brightenThreshold\n\n\t//whitens any pixel with a saturation greater than threshold\n\t//threshold range is 0-100\n\tpixelProcessor.transforms.saturationThreshold\n\n\t//dims any pixel with a Luma greater than threshold. this is not the same as adding black\n\t//threshold range is 0-255\n\tpixelProcessor.transforms.dimThreshold\n\n\t//lighten any pixel with a Luma less than threshold. this is not the same as adding white\n\t//threshold range is 0-255\n\tpixelProcessor.transforms.lightenThreshold\n\n\nconversionLib\nconversion lib has all of the color space conversion functions.\n\nall of these function exports take 3 arguments that are the 3 components of their colorspace\nall of these function return and array with the 3 components of the new color space\n\n\trgbToHsl(r,g,b)\n\thslToRgb(h.s.l)\n\trgbToHsv(r,g,b)\n\thsvToRgb(h,s,v)\n\trgbToYuv(r,g,b)\n\tyuvToRgb(y,u,v)\n\nthis accepts r,g,b like the others bvut only returns the Y component of YUV\n\n\tluma709Only(r,g,b)\n\ni welcome pull requests for other helper methods for color conversion, opacity to color, hex to rgb etc.\ni feel that this is where they belong... for now =)\n\nexample\n-------\n\n\tvar Canvas = require('canvas')\n\t, canvas = new Canvas(100,100)\n\t,pxCore = new require('canvasutil').PixelCore;\n\t,img = new Canvas.Image();\n\n\timg.onload(function(){\n\t\tvar ctx = canvas.getContext('2d');\n\t\tctx.drawImage(img,0,0);\n\n\t\tpxCore.threshold = 30;\n\t\tpxCore.itterate(canvas,pxCore.transforms.brightenThreshold);\n\n\t\tcanvas.toDataURL(function(err,url){\n\t\t\tconsole.log(url);\n\t\t});\n\t});\n\timg.src = \"some path to an image\";\n",
  "readmeFilename": "README.md",
  "_id": "canvasutil@0.0.2",
  "dist": {
    "shasum": "7e0565d38881e783bd34c3b61befef5a78af82dc"
  },
  "_from": "canvasutil"
}
